//
// C:/Users/visuser/gitlab-runner/builds/oGM4Jr8r/0/renderkit/ospray/build_release/modules/cpu/texture/TextureVolume_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus


#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_ManagedObject__
#define __ISPC_STRUCT_ManagedObject__
struct ManagedObject {
};
#endif

#ifndef __ISPC_STRUCT_v4_varying___vkl_vec3f__
#define __ISPC_STRUCT_v4_varying___vkl_vec3f__
__ISPC_ALIGNED_STRUCT__(16) v4_varying___vkl_vec3f {
    __ISPC_ALIGN__(16) float x[4];
    __ISPC_ALIGN__(16) float y[4];
    __ISPC_ALIGN__(16) float z[4];
};
#endif

#ifndef __ISPC_STRUCT___vkl_vec3f__
#define __ISPC_STRUCT___vkl_vec3f__
struct __vkl_vec3f {
    float x;
    float y;
    float z;
};
#endif

#ifndef __ISPC_STRUCT___vkl_box3f__
#define __ISPC_STRUCT___vkl_box3f__
struct __vkl_box3f {
    struct __vkl_vec3f lower;
    struct __vkl_vec3f upper;
};
#endif

#ifndef __ISPC_STRUCT___vkl_box1f__
#define __ISPC_STRUCT___vkl_box1f__
struct __vkl_box1f {
    float lower;
    float upper;
};
#endif

#ifndef __ISPC_STRUCT_v4_varying___vkl_box1f__
#define __ISPC_STRUCT_v4_varying___vkl_box1f__
__ISPC_ALIGNED_STRUCT__(16) v4_varying___vkl_box1f {
    __ISPC_ALIGN__(16) float lower[4];
    __ISPC_ALIGN__(16) float upper[4];
};
#endif

#ifndef __ISPC_STRUCT_v4_varying_VKLHit__
#define __ISPC_STRUCT_v4_varying_VKLHit__
__ISPC_ALIGNED_STRUCT__(16) v4_varying_VKLHit {
    __ISPC_ALIGN__(16) float t[4];
    __ISPC_ALIGN__(16) float sample[4];
    __ISPC_ALIGN__(16) float epsilon[4];
};
#endif

#ifndef __ISPC_STRUCT_v4_varying_VKLInterval__
#define __ISPC_STRUCT_v4_varying_VKLInterval__
__ISPC_ALIGNED_STRUCT__(16) v4_varying_VKLInterval {
    struct v4_varying___vkl_box1f tRange;
    struct v4_varying___vkl_box1f valueRange;
    __ISPC_ALIGN__(16) float nominalDeltaT[4];
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void *  TextureVolume_getN_addr();
    extern void *  TextureVolume_get_addr();
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_v8_varying___vkl_vec3f__
#define __ISPC_STRUCT_v8_varying___vkl_vec3f__
__ISPC_ALIGNED_STRUCT__(32) v8_varying___vkl_vec3f {
    __ISPC_ALIGN__(32) float x[8];
    __ISPC_ALIGN__(32) float y[8];
    __ISPC_ALIGN__(32) float z[8];
};
#endif

#ifndef __ISPC_STRUCT_v8_varying___vkl_box1f__
#define __ISPC_STRUCT_v8_varying___vkl_box1f__
__ISPC_ALIGNED_STRUCT__(32) v8_varying___vkl_box1f {
    __ISPC_ALIGN__(32) float lower[8];
    __ISPC_ALIGN__(32) float upper[8];
};
#endif

#ifndef __ISPC_STRUCT_v8_varying_VKLHit__
#define __ISPC_STRUCT_v8_varying_VKLHit__
__ISPC_ALIGNED_STRUCT__(32) v8_varying_VKLHit {
    __ISPC_ALIGN__(32) float t[8];
    __ISPC_ALIGN__(32) float sample[8];
    __ISPC_ALIGN__(32) float epsilon[8];
};
#endif

#ifndef __ISPC_STRUCT_v8_varying_VKLInterval__
#define __ISPC_STRUCT_v8_varying_VKLInterval__
__ISPC_ALIGNED_STRUCT__(32) v8_varying_VKLInterval {
    struct v8_varying___vkl_box1f tRange;
    struct v8_varying___vkl_box1f valueRange;
    __ISPC_ALIGN__(32) float nominalDeltaT[8];
};
#endif


#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_v16_varying___vkl_vec3f__
#define __ISPC_STRUCT_v16_varying___vkl_vec3f__
__ISPC_ALIGNED_STRUCT__(64) v16_varying___vkl_vec3f {
    __ISPC_ALIGN__(64) float x[16];
    __ISPC_ALIGN__(64) float y[16];
    __ISPC_ALIGN__(64) float z[16];
};
#endif

#ifndef __ISPC_STRUCT_v16_varying___vkl_box1f__
#define __ISPC_STRUCT_v16_varying___vkl_box1f__
__ISPC_ALIGNED_STRUCT__(64) v16_varying___vkl_box1f {
    __ISPC_ALIGN__(64) float lower[16];
    __ISPC_ALIGN__(64) float upper[16];
};
#endif

#ifndef __ISPC_STRUCT_v16_varying_VKLHit__
#define __ISPC_STRUCT_v16_varying_VKLHit__
__ISPC_ALIGNED_STRUCT__(64) v16_varying_VKLHit {
    __ISPC_ALIGN__(64) float t[16];
    __ISPC_ALIGN__(64) float sample[16];
    __ISPC_ALIGN__(64) float epsilon[16];
};
#endif

#ifndef __ISPC_STRUCT_v16_varying_VKLInterval__
#define __ISPC_STRUCT_v16_varying_VKLInterval__
__ISPC_ALIGNED_STRUCT__(64) v16_varying_VKLInterval {
    struct v16_varying___vkl_box1f tRange;
    struct v16_varying___vkl_box1f valueRange;
    __ISPC_ALIGN__(64) float nominalDeltaT[16];
};
#endif



#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
